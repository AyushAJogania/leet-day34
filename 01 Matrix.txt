#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();
        
        vector<vector<int>> result(m, vector<int>(n, -1));
        queue<pair<int, int>> q;
        
        // Initialize the queue with all cells containing 0.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    result[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
        
        vector<int> dirs = {-1, 0, 1, 0, -1};
        
        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            for (int d = 0; d < 4; d++) {
                int newRow = row + dirs[d];
                int newCol = col + dirs[d + 1];
                
                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && result[newRow][newCol] == -1) {
                    result[newRow][newCol] = result[row][col] + 1;
                    q.push({newRow, newCol});
                }
            }
        }
        
        return result;
    }
};
